@page "/orders"

@using Shop.DataModels.CustomModels;
@using Shop.DataModels.Models;
@using Shop.Admin.Services;
@inject IAdminPanelService adminPanelService

<style>

    .modal {
        position: fixed;
        z-index: 1;
        padding-top: 100px;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        background-color: rgb(0,0,0);
        background-color: rgba(0,0,0,0.4);
        display: block;
    }

    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 50%;
        overflow: hidden;
    }

    .close {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }
</style>

<div class="card">
    <h4 class="card-header">Orders</h4>
    <div class="card-body bg-dark">
        @if (customerOrders == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table table-striped table-bordered bg-light">
                <thead>
                    <tr>
                        <th>Order #</th>
                        <th>Total #</th>
                        <th>Order Date #</th>
                        <th style="width:80px;">Track?</th>
                        <th style="width:80px;">Details?</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var odr in customerOrders)
                    {
                        <tr>
                            <td>@odr.OrderId</td>
                            <td>@odr.Total</td>
                            <td>@odr.CreatedOn</td>
                            <td>
                                <input type="button" class="btn btn-primary" value="Track" @onclick="(() => Track_Click(odr.OrderId))" />
                            </td>
                            <td>
                                <input type="button" class="btn btn-secondary" value="Detail" @onclick="(() => Detail_Click(odr.OrderId))" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>


@if (showOrderDetail == true)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5> Order Details  </h5>
                <span class="close" @onclick="ToggleOrderDetailPopup">&times;</span>
            </div>
            <div class="modal-body">

                @if (@myCart != null && @myCart.Count > 0)
                {
                    <table class="table table-bordered">
                        @foreach (var cart in myCart)
                        {
                            <tr>
                                <td style="padding:0px;">
                                    <img src="http://localhost:57478/@cart.ProductImage" alt="Product Photo" style="width:50px;height:50px;" />
                                    <div>
                                        <p>@cart.ProductName</p>
                                    </div>
                                </td>
                                <td style="padding:0px;">@cart.Quantity X ₹@cart.Price </td>
                                <td style="padding:0px;">₹@(cart.Price*cart.Quantity).00</td>
                            </tr>
                        }
                    </table>

                    <table style="width:550px;border:1px ridge #f5750d;">
                        <tr>
                            <td>Subtotal - $@subTotal.00</td>
                            <td>Shipping Charges - $@shippingCharges.00</td>
                        </tr>
                        <tr>
                            <td>Total - $@finalTotal.00</td>
                            <td>Shipping Address - @shippingAddress</td>
                        </tr>
                        <tr>
                            <td>
                                Payment Mode- @paymentMode
                            </td>
                        </tr>
                    </table>
                }
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-secondary" value="Close" @onclick="ToggleOrderDetailPopup" />
            </div>
        </div>
    </div>
}

@if (showTrackOrder == true)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Track Order  </h5>
                <span class="close" @onclick="ToggleTrackOrderPopup">&times;</span>
            </div>
            <div class="modal-body">
                <div>
                    <label>Select Status :</label>
                    @if (shippingList != null)
                    {
                        <select class="form-control" @onchange="@ShippingStatusClicked">
                            <option value="">-- Select--</option>
                            @foreach (var cat in shippingList)
                            {
                                <option value="@cat.Id">@cat.Name</option>
                            }
                        </select>
                    }
                    <div>
                        <label>Comment :</label>
                        <input type="text" @bind="shippingComments" class="form-control" />
                    </div>
                </div>

                <span style="background-color:yellow;">@shippingText</span>
                <input type="button" class="btn btn-primary" value="Update" @onclick="UpdateShippingStatusForOrder" />
                <hr />
                @if (shippingUpdates != null)
                {
                    <table>
                        <tbody>
                            @foreach (var odr in shippingUpdates)
                            {
                                <tr>
                                    <td>@odr</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
               
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Close" @onclick="ToggleTrackOrderPopup" />
            </div>
        </div>
    </div>
}

@if (successPoupup == true)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                Alert  <span class="close" @onclick="ToggleSuccessPopup">&times;</span>
            </div>
            <div class="modal-body">
                @Message
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Close" @onclick="ToggleSuccessPopup" />
            </div>
        </div>
    </div>
}


@code {

    [CascadingParameter]
    public EventCallback notify { get; set; }

    public List<ShippingModel> shippingList { get; set; }
    public List<string> shippingUpdates { get; set; }
    public string shippingText { get; set; }
    public string shippingComments { get; set; } = string.Empty;
    public string orderNumber { get; set; }

    private List<CustomerOrder> customerOrders;
    public List<CartModel> myCart { get; set; }
    public string shippingAddress { get; set; }
    public int subTotal { get; set; }
    public int shippingCharges { get; set; }
    public int finalTotal { get; set; }
    public string paymentMode { get; set; }

    IReadOnlyList<IBrowserFile> selectedFiles;
    List<string> imageUrls = new List<string>();
    public bool showOrderDetail = false;
    public bool successPoupup = false;
    public bool showTrackOrder = false;
    string Message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetOrders();
        await GetShippingStatus();
    }

    private async Task GetShippingStatus()
    {
        shippingList = await adminPanelService.GetShippingStatus();
    }

    private void ShippingStatusClicked(ChangeEventArgs shippingEvent)
    {
        shippingText = string.Empty;

        int sid = Convert.ToInt32(shippingEvent.Value);
        foreach (var item in shippingList)
        {
            if (item.Id == sid)
            {
                shippingText = item.Name;
                break;
            }
        }

        shippingText = shippingText + "-" + shippingComments;
    }

    private async Task UpdateShippingStatusForOrder()
    {
        shippingUpdates= await adminPanelService.UpdateShippingStatusForOrder(orderNumber, shippingText);
    }

    private async Task GetShippingStatusForOrder()
    {
        shippingUpdates= await adminPanelService.GetShippingStatusForOrder(orderNumber);
        await GetShippingStatus();
    }

    private async Task GetOrders()
    {
        customerOrders = await adminPanelService.GetOrders();
    }

    private void ToggleOrderDetailPopup()
    {
        showOrderDetail = showOrderDetail == true ? false : true;
    }

    private void ToggleSuccessPopup()
    {
        successPoupup = successPoupup == true ? false : true;
    }

    private async Task Detail_Click(string order_number)
    {
        myCart = await adminPanelService.GetOrderDetails(order_number);
        if (myCart != null && myCart.Count > 0)
        {
            shippingAddress = myCart.FirstOrDefault().ShippingAddress;
            shippingCharges = myCart.FirstOrDefault().ShippingCharges;
            subTotal = myCart.FirstOrDefault().SubTotal;
            finalTotal = myCart.FirstOrDefault().Total;
            paymentMode = myCart.FirstOrDefault().PaymentMode;
        }

        ToggleOrderDetailPopup();
    }

    private void Track_Click(string order_number)
    {
        orderNumber = order_number;
        shippingText = string.Empty;
        GetShippingStatusForOrder();
        ToggleTrackOrderPopup();
    }

    private void ToggleTrackOrderPopup()
    {
        showTrackOrder = showTrackOrder == true ? false : true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await notify.InvokeAsync();
        }
    }
}
